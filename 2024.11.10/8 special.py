
# Анализ древовидной переписки из JSON API
# Условия
# Вам предоставлен доступ к API, который возвращает данные в формате JSON. Данные представляют собой древовидную структуру переписки между участниками.
# Доступ к API.  https://parsinger.ru/3.4/3/dialog.json
# Анализ данных:

# Пройдитесь по древовидной структуре переписки.
# Подсчитайте, сколько сообщений отправил каждый участник.
# Участника необходимо определить по полю "username", поле  "user_id" не имеет отношения к решению данной задачи.
# Задача
# Написать скрипт на Python, который выполнит GET-запрос к данному API для получения JSON-данных.

# Преобразовать полученный JSON-ответ в Python-объект с использованием метода response.json().

# Проанализировать древовидную структуру переписки и подсчитать количество сообщений, отправленных каждым участником.

# Вставить полученный словарь в поле для ответа.

# {'Anastasia': *, 'Vladimir': *, 'Yulia': *, 'Maria': *, 'Kirill': *, 'Anton': *, 'Petr': *, 'Dmitry': *, 'Olga': *, 'Maxim': *, 'Elena': *, 'Alex': *, 'Natalia': *, 'Tatiana': *, 'Svetlana': *, 'Andrey': *, 'Sergey': *, 'Oksana': *, 'Ivan': *, 'Irina': *}
# Сортировка:
# Необходимо упорядочить данный словарь сначала по убыванию числа сообщений. То есть участник с наибольшим количеством сообщений должен идти первым, а с наименьшим — последним.
# В случае равенства числа сообщений между участниками, необходимо применить дополнительный критерий сортировки. Этот критерий основан на лексикографическом порядке имен участников. Лексикографическая сортировка схожа с алфавитной: если, например, имена 'Алексей' и 'Анна' имеют одинаковое количество сообщений, то 'Алексей' будет расположен перед 'Анной', так как лексикографически он идет раньше. Таким образом, участники с одинаковым числом сообщений будут упорядочены в словаре в зависимости от их имён, начиная с самого раннего и заканчивая самым поздним.

# Пример ниже не является корректным для системы проверки:
# {'Vladimir': 21, 'Yulia': 21, 'Anton': 14, 'Kirill': 14, 'Petr': 14, 'Dmitry': 8, 'Elena': 8, 'Maxim': 8, 'Olga': 8, 'Alex': 6, 'Natalia': 6, 'Svetlana': 6, 'Tatiana': 6, 'Oksana': 5, 'Sergey': 5}
# В примере выше:
# У 'Vladimir' и 'Yulia' одинаковое количество сообщений —21. В лексикографическом порядке "Vladimir" идет раньше "Yulia", поэтому он идет первым.

# 'Anton', 'Kirill', и 'Petr' имеют по 14 сообщений. В лексикографическом порядке имена располагаются так: 'Anton', 'Kirill', 'Petr'.

# и т.д





import requests

ans = dict()
def treee(JJ:dict):
    ans[JJ['username']]=ans.get(JJ['username'],0)+1
    if JJ['comments']:
        for el in JJ['comments']:
            treee(el)


source = "https://parsinger.ru/3.4/3/dialog.json"

response = requests.get(source)


J_sone = response.json()
#print(type(J_sone),J_sone)
treee(J_sone)


#print("\n\n\n",ans)
print(dict(sorted(ans.items(),key=lambda el:(-el[-1],el[0]))))

# {'Maria': 13, 'Alex': 8, 'Kirill': 10, 'Dmitry': 9, 'Vladimir': 14, 'Natalia': 8, 'Anton': 10, 'Sergey': 6, 'Tatiana': 8, 'Ivan': 4, 'Anastasia': 15, 'Olga': 9, 'Yulia': 14, 'Maxim': 9, 'Elena': 9, 'Irina': 2, 'Oksana': 6, 'Andrey': 7, 'Petr': 10, 'Svetlana': 8}
# {'Anastasia': 15, 'Vladimir': 14, 'Yulia': 14, 'Maria': 13, 'Kirill': 10, 'Anton': 10, 'Petr': 10, 'Dmitry': 9, 'Olga': 9, 'Maxim': 9, 'Elena': 9, 'Alex': 8, 'Natalia': 8, 'Tatiana': 8, 'Svetlana': 8, 'Andrey': 7, 'Sergey': 6, 'Oksana': 6, 'Ivan': 4, 'Irina': 2}